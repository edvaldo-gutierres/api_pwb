from dotenv import load_dotenv
from tabulate import tabulate
import requests
import msal
import os

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o do Power BI
TENANT_ID = os.getenv("TENANT_ID")
APP_ID = os.getenv("APP_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
POWER_BI_BASE_URL = "https://api.powerbi.com/v1.0/myorg"


# Fun√ß√£o para obter o token de acesso
def request_access_token():
    """
    Obt√©m um token de acesso do Azure AD para autentica√ß√£o na API do Power BI.

    Esta fun√ß√£o utiliza a biblioteca MSAL para realizar a autentica√ß√£o OAuth2 com
    as credenciais da aplica√ß√£o registrada no Azure Active Directory.

    Retorna:
        str: Token de acesso v√°lido para realizar chamadas na API do Power BI.

    Lan√ßa:
        Exception: Se houver erro na autentica√ß√£o, a fun√ß√£o levanta uma exce√ß√£o
        informando o motivo do erro.

    Depend√™ncias:
        - A aplica√ß√£o precisa estar registrada no Azure AD.
        - As vari√°veis de ambiente TENANT_ID, APP_ID e CLIENT_SECRET devem estar configuradas.
        - O consentimento do administrador deve ser concedido para as permiss√µes da API do Power BI.

    Exemplo de uso:
        access_token = request_access_token()
        headers = {"Authorization": f"Bearer {access_token}"}
    """
    authority_url = f"https://login.microsoftonline.com/{TENANT_ID}"
    scopes = ["https://analysis.windows.net/powerbi/api/.default"]

    client = msal.ConfidentialClientApplication(
        APP_ID, authority=authority_url, client_credential=CLIENT_SECRET
    )
    token_response = client.acquire_token_for_client(scopes=scopes)

    if "access_token" not in token_response:
        raise Exception(
            f"Erro na autentica√ß√£o: {token_response.get('error_description', 'Desconhecido')}"
        )

    return token_response["access_token"]


# Fun√ß√£o para listar workspaces
def list_workspaces(access_token):
    """
    Lista todos os workspaces dispon√≠veis no Power BI para o usu√°rio autenticado.

    Esta fun√ß√£o realiza uma requisi√ß√£o √† API do Power BI para obter uma lista de
    todos os workspaces acess√≠veis pelo token de autentica√ß√£o fornecido.

    Par√¢metros:
        access_token (str): Token de acesso obtido via Azure AD para autentica√ß√£o na API do Power BI.

    Retorna:
        list: Uma lista de dicion√°rios contendo informa√ß√µes dos workspaces dispon√≠veis.
        Cada workspace possui chaves como:
            - 'id': Identificador √∫nico do workspace.
            - 'name': Nome do workspace.

    Exce√ß√µes tratadas:
        - Se a API retornar um erro, a fun√ß√£o exibe a mensagem de erro e retorna uma lista vazia.

    Depend√™ncias:
        - O usu√°rio ou aplica√ß√£o precisa ter permiss√£o para acessar os workspaces.
        - O token de acesso deve ser v√°lido e conter a permiss√£o `Workspace.Read.All`.

    Exemplo de uso:
        access_token = request_access_token()
        workspaces = list_workspaces(access_token)
        for ws in workspaces:
            print(f"ID: {ws['id']} - Nome: {ws['name']}")
    """
    endpoint = f"{POWER_BI_BASE_URL}/groups"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(endpoint, headers=headers)

    if response.status_code == 200:
        return response.json().get("value", [])
    else:
        print(f"Erro ao listar workspaces: {response.status_code} - {response.text}")
        return []


# Fun√ß√£o para listar relat√≥rios de um workspace
def list_reports(access_token, group_id):
    """
    Lista todos os relat√≥rios dispon√≠veis em um workspace espec√≠fico no Power BI.

    Esta fun√ß√£o faz uma requisi√ß√£o √† API do Power BI para obter uma lista de relat√≥rios
    pertencentes a um workspace identificado pelo `group_id`.

    Par√¢metros:
        access_token (str): Token de acesso obtido via Azure AD para autentica√ß√£o na API do Power BI.
        group_id (str): Identificador √∫nico do workspace no qual os relat√≥rios ser√£o listados.

    Retorna:
        list: Uma lista de dicion√°rios contendo informa√ß√µes dos relat√≥rios dispon√≠veis.
        Cada relat√≥rio possui chaves como:
            - 'id': Identificador √∫nico do relat√≥rio.
            - 'name': Nome do relat√≥rio.
            - 'webUrl': URL do relat√≥rio no Power BI Service.

    Exce√ß√µes tratadas:
        - Se a API retornar um erro, a fun√ß√£o exibe a mensagem de erro e retorna uma lista vazia.

    Depend√™ncias:
        - O usu√°rio ou aplica√ß√£o precisa ter permiss√£o para acessar os relat√≥rios no workspace.
        - O token de acesso deve ser v√°lido e conter a permiss√£o `Report.Read.All`.

    Exemplo de uso:
        access_token = request_access_token()
        group_id = "d975d1c2-9dcf-401a-b794-8f158c51a4e1"
        reports = list_reports(access_token, group_id)
        for report in reports:
            print(f"ID: {report['id']} - Nome: {report['name']} - URL: {report['webUrl']}")
    """
    endpoint = f"{POWER_BI_BASE_URL}/groups/{group_id}/reports"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(endpoint, headers=headers)

    if response.status_code == 200:
        return response.json().get("value", [])
    else:
        print(f"Erro ao listar relat√≥rios: {response.status_code} - {response.text}")
        return []


# Fun√ß√£o para listar datasets de um workspace
def list_datasets(access_token, group_id):
    """
    Lista todos os datasets (modelos sem√¢nticos) dispon√≠veis em um workspace do Power BI.

    Esta fun√ß√£o faz uma requisi√ß√£o √† API do Power BI para obter uma lista de datasets
    associados a um workspace espec√≠fico, identificado pelo `group_id`.

    Par√¢metros:
        access_token (str): Token de acesso obtido via Azure AD para autentica√ß√£o na API do Power BI.
        group_id (str): Identificador √∫nico do workspace no qual os datasets ser√£o listados.

    Retorna:
        list: Uma lista de dicion√°rios contendo informa√ß√µes dos datasets dispon√≠veis.
        Cada dataset pode conter chaves como:
            - 'id': Identificador √∫nico do dataset.
            - 'name': Nome do dataset.
            - 'isRefreshable': Indica se o dataset pode ser atualizado.
            - 'configuredBy': Usu√°rio que configurou o dataset.

    Tratamento de erros:
        - Se a API retornar erro 401 (Token inv√°lido), exibe uma mensagem informando falta de permiss√£o.
        - Se a resposta da API n√£o for um JSON v√°lido, exibe um aviso e retorna uma lista vazia.
        - Se a API retornar outro erro, exibe o c√≥digo e a mensagem de erro.

    Depend√™ncias:
        - O usu√°rio ou aplica√ß√£o precisa ter permiss√£o para acessar os datasets no workspace.
        - O token de acesso deve ser v√°lido e conter a permiss√£o `Dataset.Read.All`.

    Exemplo de uso:
        access_token = request_access_token()
        group_id = "d975d1c2-9dcf-401a-b794-8f158c51a4e1"
        datasets = list_datasets(access_token, group_id)
        for dataset in datasets:
            print(f"ID: {dataset['id']} - Nome: {dataset['name']} - Atualiz√°vel: {dataset['isRefreshable']}")
    """
    endpoint = f"{POWER_BI_BASE_URL}/groups/{group_id}/datasets"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(endpoint, headers=headers)

    if response.status_code == 200:
        try:
            datasets = response.json().get("value", [])
            return datasets
        except requests.exceptions.JSONDecodeError:
            print("‚ùå Erro ao decodificar JSON: resposta vazia.")
            return []
    elif response.status_code == 401:
        print("‚ùå Erro 401: Token inv√°lido ou sem permiss√£o.")
        print(
            "Verifique se as permiss√µes do aplicativo est√£o configuradas corretamente no Azure."
        )
    else:
        print(f"‚ùå Erro {response.status_code}: {response.text}")

    return []


# Fun√ß√£o para listar tabelas de um dataset (Modelos Sem√¢nticos)
def get_dataset_tables(access_token, group_id, dataset_id):
    """
    Obt√©m as tabelas associadas a um modelo sem√¢ntico dentro de um workspace espec√≠fico.

    :param access_token: Token de autentica√ß√£o
    :param group_id: ID do workspace (group)
    :param dataset_id: ID do dataset (modelo sem√¢ntico)
    :return: Lista de tabelas do modelo sem√¢ntico
    """
    endpoint = f"https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/lineage"
    headers = {"Authorization": f"Bearer {access_token}"}

    response = requests.get(endpoint, headers=headers)

    if response.status_code == 200:
        lineage_data = response.json()
        tables = [
            item["name"]
            for item in lineage_data.get("datasetSchema", {}).get("tables", [])
        ]
        return tables
    elif response.status_code == 403:
        print(f"üö´ Permiss√£o negada para acessar o dataset {dataset_id}.")
        print(f"Erro 403: {response.text}")
    else:
        print(
            f"‚ùå Erro ao obter tabelas do dataset {dataset_id}: {response.status_code} - {response.text}"
        )

    return []


# Fun√ß√£o para imprimir datasets no console
def print_datasets_table(datasets):
    """
    Exibe uma lista de datasets (modelos sem√¢nticos) formatada em tabela no console.

    Esta fun√ß√£o recebe uma lista de datasets e os exibe de forma organizada usando a
    biblioteca `tabulate`. Se a lista estiver vazia, exibe uma mensagem informando
    que nenhum dataset foi encontrado.

    Par√¢metros:
        datasets (list): Lista de dicion√°rios contendo informa√ß√µes dos datasets.
        Cada dataset pode conter as seguintes chaves:
            - 'id' (str): Identificador √∫nico do dataset.
            - 'name' (str): Nome do dataset.
            - 'webUrl' (str): URL para acessar o dataset no Power BI Service.
            - 'isRefreshable' (bool): Indica se o dataset pode ser atualizado.
            - 'configuredBy' (str): Usu√°rio que configurou o dataset.

    Retorno:
        None: A fun√ß√£o apenas exibe os dados no console e n√£o retorna valores.

    Depend√™ncias:
        - A biblioteca `tabulate` deve estar instalada (`pip install tabulate`).
        - A fun√ß√£o deve receber uma lista v√°lida de datasets, obtida via API.

    Exemplo de uso:
        datasets = [
            {
                "id": "1234",
                "name": "Dataset Vendas",
                "webUrl": "https://app.powerbi.com/dataset/1234",
                "isRefreshable": True,
                "configuredBy": "admin@empresa.com"
            }
        ]
        print_datasets_table(datasets)

    """
    if not datasets:
        print("Nenhum dataset encontrado.")
        return

    table_data = []
    for ds in datasets:
        table_data.append(
            [
                ds.get("id", ""),
                ds.get("name", ""),
                ds.get("webUrl", ""),
                ds.get("isRefreshable", ""),
                ds.get("configuredBy", ""),
            ]
        )

    headers = ["ID", "Nome", "WebUrl", "isRefreshable", "configuredBy"]
    print(tabulate(table_data, headers=headers, tablefmt="fancy_grid"))


# Fun√ß√£o para exibir relat√≥rios e tabelas associadas
def list_reports_and_tables(access_token, group_id):
    """
    Lista todos os relat√≥rios dispon√≠veis em um workspace do Power BI e exibe
    as tabelas associadas aos datasets de cada relat√≥rio.

    Esta fun√ß√£o obt√©m a lista de relat√≥rios dentro de um workspace e, para
    cada relat√≥rio, verifica se h√° um dataset vinculado. Se houver, tenta
    listar as tabelas associadas ao dataset.

    Par√¢metros:
        access_token (str): Token de acesso obtido via Azure AD para autentica√ß√£o na API do Power BI.
        group_id (str): Identificador √∫nico do workspace no qual os relat√≥rios ser√£o listados.

    Retorno:
        None: A fun√ß√£o apenas exibe os dados no console e n√£o retorna valores.

    Tratamento de erros:
        - Se o workspace n√£o contiver relat√≥rios, exibe uma mensagem e retorna.
        - Se um relat√≥rio n√£o possuir dataset associado, exibe uma mensagem informativa.
        - Se houver erro ao buscar tabelas do dataset, exibe um aviso.

    Depend√™ncias:
        - O usu√°rio ou aplica√ß√£o precisa ter permiss√£o para acessar os relat√≥rios e datasets no workspace.
        - O token de acesso deve ser v√°lido e conter as permiss√µes `Report.Read.All` e `Dataset.Read.All`.

    Exemplo de uso:
        access_token = request_access_token()
        group_id = "d975d1c2-9dcf-401a-b794-8f158c51a4e1"
        list_reports_and_tables(access_token, group_id)

    """
    reports = list_reports(access_token, group_id)

    if not reports:
        print("Nenhum relat√≥rio encontrado.")
        return

    for report in reports:
        report_name = report.get("name")
        dataset_id = report.get("datasetId")

        print(f"\nüìä Relat√≥rio: {report_name}")
        print(f"  Dataset ID: {dataset_id}")

        if dataset_id:
            tables = get_dataset_tables(access_token, group_id, dataset_id)
            if tables:
                print("  üîç Tabelas utilizadas:")
                for table in tables:
                    print(f"    - {table}")
            else:
                print("  üö´ Nenhuma tabela encontrada.")
        else:
            print("  üö´ Este relat√≥rio n√£o tem um dataset vinculado.")


# Atualiza o modelo sem√¢ntico (antigo dataset)
def update_semantic_model(group_id, dataset_id, access_token):
    """
    Inicia a atualiza√ß√£o de um modelo sem√¢ntico no Power BI.

    Esta fun√ß√£o faz uma requisi√ß√£o √† API do Power BI para iniciar o refresh de um
    dataset (modelo sem√¢ntico) dentro de um workspace espec√≠fico.

    Par√¢metros:
        group_id (str): Identificador √∫nico do workspace onde o dataset est√° localizado.
        dataset_id (str): Identificador √∫nico do dataset a ser atualizado.
        access_token (str): Token de acesso obtido via Azure AD para autentica√ß√£o na API do Power BI.

    Retorno:
        None: A fun√ß√£o apenas exibe no console se a atualiza√ß√£o foi iniciada com sucesso ou se houve erro.

    Tratamento de erros:
        - Se a atualiza√ß√£o for iniciada corretamente (`status_code 202`), exibe uma mensagem de sucesso.
        - Se houver erro na requisi√ß√£o, exibe o c√≥digo do erro e a mensagem retornada pela API.

    Depend√™ncias:
        - O usu√°rio ou aplica√ß√£o precisa ter permiss√£o para atualizar modelos sem√¢nticos no Power BI.
        - O token de acesso deve ser v√°lido e conter a permiss√£o `Dataset.ReadWrite.All`.

    Exemplo de uso:
        access_token = request_access_token()
        group_id = "d975d1c2-9dcf-401a-b794-8f158c51a4e1"
        dataset_id = "a1fc762a-4d1b-486b-b147-fa7db3d8d1bf"
        update_semantic_model(group_id, dataset_id, access_token)
    """
    endpoint = f"https://api.powerbi.com/v1.0/myorg/groups/{group_id}/datasets/{dataset_id}/refreshes"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {access_token}",
    }

    response = requests.post(endpoint, headers=headers)

    if response.status_code == 202:
        print("‚úÖ Atualiza√ß√£o do modelo sem√¢ntico iniciada com sucesso!")
    else:
        print(
            f"‚ùå Erro ao atualizar o modelo sem√¢ntico: {response.status_code} - {response.text}"
        )


# Fun√ß√£o principal
def main():
    access_token = request_access_token()
    workspaces = list_workspaces(access_token)

    if not workspaces:
        print("Nenhum workspace encontrado.")
        return

    print("\nüåê Lista de Workspaces:")
    for i, ws in enumerate(workspaces):
        print(f"{i+1}. {ws['name']} (ID: {ws['id']})")

    choice = (
        int(input("\nDigite o n√∫mero do workspace para listar os relat√≥rios: ")) - 1
    )
    selected_workspace = workspaces[choice]["id"]

    datasets = list_datasets(access_token, selected_workspace)
    print("\nüìÇ Datasets Dispon√≠veis:")
    print_datasets_table(datasets)

    list_reports_and_tables(access_token, selected_workspace)

    # Op√ß√£o para atualizar dataset
    update = input("\nDeseja atualizar algum dataset? (s/n): ").strip().lower()
    if update == "s":
        dataset_id = input("Digite o ID do dataset a ser atualizado: ").strip()
        update_semantic_model(selected_workspace, dataset_id, access_token)


# Executa o script
if __name__ == "__main__":
    main()
